// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace projekat.Migrations
{
    [DbContext(typeof(NightEventsContext))]
    [Migration("20230527140810_V1")]
    partial class V1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Administrator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Administratori");
                });

            modelBuilder.Entity("Models.Dogadjaj", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrojRezervacija")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Datum")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("KlubID")
                        .HasColumnType("int");

                    b.Property<int?>("MuzickiIzvodjacID")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Vreme")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("KlubID");

                    b.HasIndex("MuzickiIzvodjacID");

                    b.ToTable("Dogadjaji");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cena")
                        .HasColumnType("int");

                    b.Property<int?>("DogadjajID")
                        .HasColumnType("int");

                    b.Property<int?>("KorisnikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DogadjajID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Karte");
                });

            modelBuilder.Entity("Models.Klub", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("BrojStolovaBS")
                        .HasColumnType("int");

                    b.Property<int>("BrojStolovaS")
                        .HasColumnType("int");

                    b.Property<int>("BrojStolovaVS")
                        .HasColumnType("int");

                    b.Property<string>("Lokacija")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MapaKluba")
                        .HasColumnType("longtext");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SlikaKluba")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("Klubovi");
                });

            modelBuilder.Entity("Models.KomentarDogadjaj", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DogadjajID")
                        .HasColumnType("int");

                    b.Property<int?>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("DogadjajID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("KomentariDogadjaji");
                });

            modelBuilder.Entity("Models.KomentarIzvodjac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("KorisnikID")
                        .HasColumnType("int");

                    b.Property<int?>("MuzickiIzvodjacID")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("KorisnikID");

                    b.HasIndex("MuzickiIzvodjacID");

                    b.ToTable("KomentariIzvodjaci");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("Models.MuzickiIzvodjac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrClanova")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImeIzvodjaca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zanr")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ID");

                    b.ToTable("MuzickiIzvodjaci");
                });

            modelBuilder.Entity("Models.OcenaKlub", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("KlubID")
                        .HasColumnType("int");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KlubID");

                    b.ToTable("OceneKlubova");
                });

            modelBuilder.Entity("Models.OcenaMuzickiIzvodjac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MuzickiIzvodjacID")
                        .HasColumnType("int");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MuzickiIzvodjacID");

                    b.ToTable("OceneIzvodjaca");
                });

            modelBuilder.Entity("Models.Organizator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Organizatori");
                });

            modelBuilder.Entity("Models.Rezervacija", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DogadjajID")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DogadjajID");

                    b.HasIndex("KorisnikID");

                    b.ToTable("Rezervacije");
                });

            modelBuilder.Entity("Models.Sto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DogadjajID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("DogadjajID");

                    b.ToTable("Stolovi");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Sto");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.TerminiIzvodjaca", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MuzickiIzvodjacID")
                        .HasColumnType("int");

                    b.Property<bool>("Rezervisan")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Termin")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.HasIndex("MuzickiIzvodjacID");

                    b.ToTable("TerminiIzvodjaca");
                });

            modelBuilder.Entity("Models.StoBarski", b =>
                {
                    b.HasBaseType("Models.Sto");

                    b.HasDiscriminator().HasValue("StoBarski");
                });

            modelBuilder.Entity("Models.StoSepare", b =>
                {
                    b.HasBaseType("Models.Sto");

                    b.HasDiscriminator().HasValue("StoSepare");
                });

            modelBuilder.Entity("Models.StoVisokoSedenje", b =>
                {
                    b.HasBaseType("Models.Sto");

                    b.HasDiscriminator().HasValue("StoVisokoSedenje");
                });

            modelBuilder.Entity("Models.Dogadjaj", b =>
                {
                    b.HasOne("Models.Klub", "Klub")
                        .WithMany("Dogadjaji")
                        .HasForeignKey("KlubID");

                    b.HasOne("Models.MuzickiIzvodjac", "MuzickiIzvodjac")
                        .WithMany("Dogadjaji")
                        .HasForeignKey("MuzickiIzvodjacID");

                    b.Navigation("Klub");

                    b.Navigation("MuzickiIzvodjac");
                });

            modelBuilder.Entity("Models.Karta", b =>
                {
                    b.HasOne("Models.Dogadjaj", "Dogadjaj")
                        .WithMany("Karte")
                        .HasForeignKey("DogadjajID");

                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany("Karte")
                        .HasForeignKey("KorisnikID");

                    b.Navigation("Dogadjaj");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Models.Klub", b =>
                {
                    b.HasOne("Models.Organizator", "Organizator")
                        .WithOne("Klub")
                        .HasForeignKey("Models.Klub", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizator");
                });

            modelBuilder.Entity("Models.KomentarDogadjaj", b =>
                {
                    b.HasOne("Models.Dogadjaj", "Dogadjaj")
                        .WithMany("KomentariDogadjaj")
                        .HasForeignKey("DogadjajID");

                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany("KomentariDogadjaji")
                        .HasForeignKey("KorisnikID");

                    b.Navigation("Dogadjaj");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Models.KomentarIzvodjac", b =>
                {
                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany("KomentariIzvodjaci")
                        .HasForeignKey("KorisnikID");

                    b.HasOne("Models.MuzickiIzvodjac", "MuzickiIzvodjac")
                        .WithMany("KomentariIzvodjac")
                        .HasForeignKey("MuzickiIzvodjacID");

                    b.Navigation("Korisnik");

                    b.Navigation("MuzickiIzvodjac");
                });

            modelBuilder.Entity("Models.OcenaKlub", b =>
                {
                    b.HasOne("Models.Klub", "Klub")
                        .WithMany("Ocene")
                        .HasForeignKey("KlubID");

                    b.Navigation("Klub");
                });

            modelBuilder.Entity("Models.OcenaMuzickiIzvodjac", b =>
                {
                    b.HasOne("Models.MuzickiIzvodjac", "MuzickiIzvodjac")
                        .WithMany("Ocene")
                        .HasForeignKey("MuzickiIzvodjacID");

                    b.Navigation("MuzickiIzvodjac");
                });

            modelBuilder.Entity("Models.Rezervacija", b =>
                {
                    b.HasOne("Models.Dogadjaj", "Dogadjaj")
                        .WithMany("Rezervacije")
                        .HasForeignKey("DogadjajID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Sto", "Sto")
                        .WithOne("Rezervacija")
                        .HasForeignKey("Models.Rezervacija", "ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Korisnik", "Korisnik")
                        .WithMany("Rezervacije")
                        .HasForeignKey("KorisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dogadjaj");

                    b.Navigation("Korisnik");

                    b.Navigation("Sto");
                });

            modelBuilder.Entity("Models.Sto", b =>
                {
                    b.HasOne("Models.Dogadjaj", "Dogadjaj")
                        .WithMany("Stolovi")
                        .HasForeignKey("DogadjajID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dogadjaj");
                });

            modelBuilder.Entity("Models.TerminiIzvodjaca", b =>
                {
                    b.HasOne("Models.MuzickiIzvodjac", "MuzickiIzvodjac")
                        .WithMany("Termini")
                        .HasForeignKey("MuzickiIzvodjacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MuzickiIzvodjac");
                });

            modelBuilder.Entity("Models.Dogadjaj", b =>
                {
                    b.Navigation("Karte");

                    b.Navigation("KomentariDogadjaj");

                    b.Navigation("Rezervacije");

                    b.Navigation("Stolovi");
                });

            modelBuilder.Entity("Models.Klub", b =>
                {
                    b.Navigation("Dogadjaji");

                    b.Navigation("Ocene");
                });

            modelBuilder.Entity("Models.Korisnik", b =>
                {
                    b.Navigation("Karte");

                    b.Navigation("KomentariDogadjaji");

                    b.Navigation("KomentariIzvodjaci");

                    b.Navigation("Rezervacije");
                });

            modelBuilder.Entity("Models.MuzickiIzvodjac", b =>
                {
                    b.Navigation("Dogadjaji");

                    b.Navigation("KomentariIzvodjac");

                    b.Navigation("Ocene");

                    b.Navigation("Termini");
                });

            modelBuilder.Entity("Models.Organizator", b =>
                {
                    b.Navigation("Klub");
                });

            modelBuilder.Entity("Models.Sto", b =>
                {
                    b.Navigation("Rezervacija");
                });
#pragma warning restore 612, 618
        }
    }
}
